Student Name :	Ayandah Dube 
Pin 		:	P1882196 T
Program 	:	BSEH
Module 	    :	BSEH 480


CHAPTER 1: Research Proposal

1.1.1	ABSTRACT

CI/CD, which stands for continuous integration (CI) and continuous delivery (CD), creates a faster and more precise way of combining the work of different people into one cohesive product. In application development and operations (DevOps), CI/CD streamlines application coding, testing and deployment by giving teams a single repository for storing work and automation tools to consistently combine and test the code to ensure it works.

1.1.2	BACKGROUND

The continuous integration/continuous delivery (CI/CD) pipeline is an agile DevOps workflow focused on a frequent and reliable software delivery process. The methodology is iterative, rather than linear, which allows DevOps teams to write code, integrate it, run tests, deliver releases and deploy changes to the software collaboratively and in real-time.
A key characteristic of the CI/CD pipeline is the use of automation to ensure code quality. As the software changes progress through the pipeline, test automation is used to identify dependencies and other issues earlier, push code changes to different environments and deliver applications to production environments. Here, the automation’s job is to perform quality control, assessing everything from performance to API usage and security. This ensures the changes made by all team members are integrated comprehensively and perform as intended.
The ability to automate various phases of the CI/CD pipeline helps development teams improve quality, work faster and improve other DevOps metrics.


1.1.3	PROBLEM STATEMENT

The unavailability of a  DevOps CI/CD pipeline framework that automates the software delivery process by using continuous integration, testing, delivery, and deployment practices for a technology company.

1.1.4	PROJECT AIM

This setup is going to take me through a DevOps journey using Azure DevOps. From setting up a pipeline to deploying an application to Azure Kubernetes cluster!

1.1.5	OBJECTIVES

•	Initial setup of Azure DevOps to begin deploying to Azure using Pipelines as code
•	Deploy Azure resources using Terraform modules
•	Deploy a test application to Azure Kubernetes Service
•	Perform CI/CD with automated application deployments
•	Test your deployed Azure resources using automated testing
•	Reviewing monitoring and alerting using Application & Container Insights

1.1.6	MATERIALS &  Prerequisites

In this study, i will make use of the packages listed below as they will help in completing the study.

    Code Editor
        With this being a DevOps journey, a suitable code editor is required. I recommend using Visual Studio Code  which is a free code editor.

    Terraform

        Terraform is an infrastructure as code tool that lets you define both cloud and on-prem resources in human-readable configuration files that you can version, reuse, and share. You can then use a consistent workflow to provision and manage all of your infrastructure throughout its lifecycle. Terraform can manage low-level components like compute, storage, and networking resources, as well as high-level components like DNS entries and SaaS features.

    Docker
        Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.

    Azure 
        Azure, is Microsoft's public cloud computing platform. It provides a broad range of cloud services, including compute, analytics, storage and networking. Users can pick and choose from these services to develop and scale new applications or run existing applications in the public cloud.

1.1.8	PROPOSED TIME ALLOCATION

This project will take 8 Weeks to complete as each stage will require a week to complete and deploy 
